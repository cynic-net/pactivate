#!/usr/bin/env bash
#
#   cont-test - run within a container to test pactivate
#

#   This is important not just for our test script here, but to make sure
#   that pactivate itself runs when sourced under these conditions.
set -eu -o pipefail

TEST_PASSED=false
trap '
    ec=$?
    $TEST_PASSED || echo "FAILURE: unexpected exit"
    $TEST_INTERACT || exit $ec
    echo "━━━━━ Entering interactive shell for debugging (last exit code=$ec)"
    exec bash -l
' 0

fail() { echo FAILURE: "$@"; TEST_PASSED=true; exit 1; }

####################################################################
#   Definitions and Functions

echo -n '━━━━━ TESTS START with '
echo    "TEST_QUIET='$TEST_QUIET' TEST_INTERACT='$TEST_INTERACT'"
pactivate="./pactivate ${TEST_QUIET:+-q}"
build=/test/.build
virtualenv=$build/virtualenv
bsve=$build/bootstrap/pactivate

clean_virtualenv() { rm -rf "$virtualenv"; }

####################################################################
#   Tests

cd /test/

echo '━━━━━ error when run with /bin/sh'
/bin/sh   $pactivate 2>err-sh   && fail "didn't fail when run with /bin/sh"
[[ 'source (.) this with Bash.' == "$(cat err-sh)" ]] \
    || { cat err-sh; fail "bad message"; }

echo '━━━━━ error when run with /bin/bash'
/bin/bash $pactivate 2>err-bash && fail "didn't fail when run with /bin/bash"
[[ 'source (.) this with Bash.' == "$(cat err-sh)" ]] \
    || { cat err-sh; fail "bad message"; }

echo '━━━━━ unknown argument error'
. $pactivate xyz 2>err-args && fail "didn't fail for bad arg"
[[ 'pactivate: unknown argument: xyz' == $(cat err-args) ]] \
    || { cat err-args; fail "bad message"; }

echo '━━━━━ run pactivate clean'
#   This does the full bootstrap and virtualenv creation
(. $pactivate)
[[ -x $bsve/pip ]] || fail "not executable: $bsve/pip"
[[ -d $bsve/virtualenv/ ]] || fail "not a dir: $bsve/virtualenv/"
$virtualenv/bin/pip --version || fail "pip --version didn't work"

echo '━━━━━ run pactivate installed'
#   This should do nothing but run the existing virtualenv's activate
#   It also tests the -q option so we can leave it out (by default)
#   for easier debugging in the more complex "with options" test below.
(. $pactivate -q && pip --version) || fail "pip --version didn't work"

echo '━━━━━ re-install virtualenv with .python symlink'
clean_virtualenv
#   We use a relative symlink here to ensure that pactivate finds the absolute
#   path to it, rather than re-using the relative path at a different
#   directory level and thus having the link point to the wrong place.
ln -s ../usr/bin/python3 .python
(. $pactivate -q && pip --version) || fail "pip --version didn't work"
echo '───── removing .python symlink'
#   A virtualenv created with the .python symlink should still work even
#   if the symlink is removed or, more importantly, changed. Removal would
#   break in an obvious way, but changing to a different version of Python
#   might break the virtualenv in much more subtle ways.
rm .python
(. $pactivate -q && pip --version) || fail "pip --version didn't work"

echo '━━━━━ run pactivate with Python 2 and requirements.txt'
#   Alternate base dir configured for different Python interpreter.
altbase=/test/altbase; mkdir -p $altbase
ln -s /usr/bin/python2 $altbase/.python
echo 'pyyaml>=5' > $altbase/requirements.txt
#   We re-use the existing build dir because we're testing download of a
#   non-modern (2.7) Python bootstrap, so the bootstrap dir will be
#   different; we need remove only the virtualenv.
clean_virtualenv
#   Rebuild and check
echo '───── running build'
(cd /tmp && . /test/$pactivate -B $altbase -b $build) \
    || fail "build failure"
[[ -d ${bsve}2.7 ]] || {
    ls -la $build/bootstrap/;
    fail "versioned bootstrap dir not found"; }
echo '───── testing activation and Python version'
(. /test/$pactivate -B $altbase -b $build \
    && v=$(python -c \
      'from platform import *; print("{}.{}".format(*python_version_tuple()))')\
    && echo "Testing version: $v" \
    && [[ $v == 2.7 ]]) || fail "wrong Python version: expected 2.7"
echo '───── testing yaml import'
$build/virtualenv/bin/python -c 'import yaml' \
    || fail "yaml import failure; requirements.txt broken?"

echo '───── checking .python difference warning'
#   This should print a warning message about the interpreter being different.
#   This won't fail if the warning isn't printed, but you can at least
#   manually confirm that it's there.
(. $pactivate -q && pip --version) || fail "pip --version didn't work"

echo '━━━━━ TESTS COMPLETE'
TEST_PASSED=true
