#   pae version 0.8.1   https://github.com/cynic-net/pactivate
#
#   pae provides pactivate-based commands similar to virtualenvwrapper.
#   See the __pae_usage() function below for full documentation.
#
#   Todo:
#   - Bash completion of NAME argument.
#   - `-p PATH` option to select Python interpreter.
#

[ -n "$BASH_VERSION" ] || { echo 1>&2 "source (.) this with Bash."; exit 9; }
#   https://stackoverflow.com/a/28776166/107294
(return 0 2>/dev/null) \
    || { echo 1>&2 "source (.) pae with Bash."; exit 9; }


#   You can change this in your environment if you want to download
#   pactivate from a different source.
__pae_pactivate_url=https://raw.githubusercontent.com/cynic-net/pactivate/main/pactivate

__pae_usage() {
    cat <<_____
Usage:
    pae [-r] NAME [CMD] ... # run a command (default NAME) in a virtual env
    pae -a NAME             # activate a virtual env
    pae -d                  # deactivate the current virtual env
    pae -l                  # list virtual env dirs in virtual env home
    pae [-p PATH] -c NAME [PKG ...]   # create a virtual env using default
                            #   Python or interpreter at PATH, and install any
                            #   packages specified by PKG arguments.
    pae -C NAME             # as -c, but leave env activated after create
    pae --rm NAME           # remove a virtual env created by pae
                            #   (this will not remove non-pae files)
    pae -U                  # update the pactivate used by this function
    pae -D                  # download latest version of pactivate
                            #   to the current working directory

All commands also accept the following options:
    -v          Verbose mode; otherwise we try to run as quietly as possible.

Virtual environments are normally stored in the "virtual environment home,"
which is specified by the PAE_HOME environment variable. If that is not set
it falls back to WORKON_HOME for virtualenvwrapper compatibility, and
then ~/.pyvirtenv. However specifying a NAME parameter with a slash in it
will instead use the exact path specified. (Use ./NAME to use a directory
under the current working directory.)

This creates new virtual environments using pactivate, with the virtual
environment in the usual place in .build/virtualenv/ under the directory
or name given. However, for backward compatibility with virtualenvwrapper
it will also activate and deactivate any name/directory that directly
contains a virtual environment built with virtualenv.
_____
}

__pae_update_pactivate() {
    #   Should this be quieter unless -v is given?
    local target_dir="$1"

    echo "----- Downloading pactivate"
    echo -n 'Current version: '
    sed -n -e 2>/dev/null \
            '/^#   pactivate /s/ *https:.*//p' "$target_dir"/pactivate \
        || echo '(none)'

    curl --fail --show-error '-#' ${quiet:+--silent} \
        --create-dirs --output "$target_dir"/pactivate \
        "$__pae_pactivate_url" \
    || { echo 1>&2 "pae: can't download pactivate"; return 22; }

    echo -n 'Updated version: '
    sed -n -e '/^#   pactivate /s/ *https:.*//p' "$target_dir"/pactivate \
        || echo '(none)'
}

pae() {
    local pae_home quiet action vedir bindir bincmd

    #   $pae_home: default virtual environments location
    if   [[ -v PAE_HOME ]]; then      pae_home="$PAE_HOME"
    elif [[ -v WORKON_HOME ]];then    pae_home="$WORKON_HOME"
    else                              pae_home=~/.pyvirtenv
    fi

    #   $action: parse command line arguments
    quiet=-q
    action=run
    pinterp=
    while [[ ${#@} -gt 0 ]]; do case "$1" in
        -a)     shift; action=activate;;
        -c)     shift; action=create; local activate_after_create=false;;
        -C)     shift; action=create; local activate_after_create=true;;
        -p)     shift; pinterp="$1"; shift;;
        -d)     shift; action=deactivate;;
        -h)     __pae_usage; return 0;;
        -l)     shift;
                ls --ignore pactivate "$pae_home"
                return 0
                ;;
        -r)     shift; action=run;;
        --rm)   shift; action=remove;;
        -U)     __pae_update_pactivate "$pae_home"; return 0;;
        -D)     __pae_update_pactivate .; return 0;;
        -v)     shift; quiet='';;
        -*)     echo 1>&2 "pae: bad option: $1 (-h for help)"; return 2
                ;;
        *)      break;;
    esac; done
    if [[ ${#@} -eq 0 ]]; then
        [[ $action == deactivate ]] || {
            echo 1>&2 "pae: missing parameter (-h for help)"; return 2; }
    elif [[ ${#@} -ne 1 && $action != run && $action != create ]]; then
        echo 1>&2 "pae: too many parameters:" "$@"; return 2
    else
        if [[ $1 != ${1##*/} ]]; then   # If there's a slash in the name,
            vedir="$1"                  #   we've been given a path.
        elif [[ $1 == . ]]; then        # Or if it's just `.`,
            vedir=./                    #   it's also a path.
        else                            # Otherwise it's a name.
            [[ $1 == .* || $1 == .. ]] && {
                echo 1>&2 "pae: bad virtualenv name: $1"
                return 2
            }
            vedir="$pae_home/$1"
        fi
        shift                           # remove last param
    fi

    case $action in
        run)
            #   $bindir: confirm virtual env exists and find its bin dir.
            if [[ -r $vedir/.build/virtualenv/bin/activate ]]; then
                bindir="$vedir/.build/virtualenv/bin"
            elif [[ -r $vedir/bin/activate ]]; then
                #   Backwards compatibility with virtualenvwrapper.
                bindir="$vedir/bin"
            else
                echo 1>&2 "pae: $vedir does not appear to be a virtual env"
                return 1
            fi
            #   Find and run the command.
            if [[ ${#@} -ge 1 && -x "$bindir/$1" ]]; then
                #   First arg is an exectuable in bin
                bincmd="$1"
                shift
            else
                #   Assume that virtual env name is also command name.
                bincmd="$(basename "$vedir")"
            fi
            [[ -z $quiet ]] \
                && echo "pae: running $bincmd from $bindir"
            "$bindir/$bincmd" "$@"
            ;;
        activate)
            if [[ -r $vedir/.build/virtualenv/bin/activate ]]; then
                . "$pae_home/pactivate" $quiet -B "$vedir"
            elif [[ -r $vedir/bin/activate ]]; then
                . "$vedir/bin/activate"    # compatibility mode
            else
                echo 1>&2 "pae: $vedir does not appear to be a virtual env"
                return 1
            fi
            ;;
        deactivate)
            if [[ $(type -t deactivate) == function ]]; then
                deactivate
            else
                echo 1>&2 "pae: no deactivate(); not in a virtual environment?"
                return 1
            fi
            ;;
        create)
            [[ -e $vedir/.build/virtualenv/bin/activate \
               || -e $vedir/bin/activate ]] \
            && {
                echo 1>&2 "pae: virtual environment already exists in $vedir"
                return 3
            }
            [[ -r "$pae_home/pactivate" ]] || __pae_update_pactivate "$pae_home"
            mkdir -p "$vedir"
            if [[ -n $pinterp ]]; then  # alternate Python interpreter provided
                echo "Python interpreter: $pinterp"
                $pinterp -c 'import sys; print(sys.version)' || {
                    echo 1>&2 "pae: bad python interpreter: $pinterp"
                    return 2
                }
                (cd "$vedir" && ln -s "$(type -p "$pinterp")" .python)
            fi
            cat >"$vedir/README" <<_____
.build/virtualenv/ is a pactivate environment created by pae.
For more information, see https://github.com/cynic-net/pactivate
_____
            for i in "$@"; do
                echo "$i" >>"$vedir/requirements.txt"
            done
            if $activate_after_create; then
                . "$pae_home/pactivate" $quiet -B "$vedir"
            else
                (. "$pae_home/pactivate" $quiet -B "$vedir")
            fi
            ;;
        remove)
            #   NOTE: This works only with pae-fromat environments; it's not
            #   worth trying to support this for virtualenvwrapper environments.
            if ! [[ -e $vedir/.build/virtualenv/bin/activate ]]; then
                echo 1>&2 "pae:" \
                    "$vedir does not appear to have a pae virtual env"
                return 1
            fi
            #   Remove README only if it appears to be one created by pae.
            if [[ 0 -eq $(grep -s -c -E -v \
                          'is a pactivate environment created by pae|For more information, see https://github.com/cynic-net/pactivate' \
                          "$vedir"/README
            ) ]]; then
                rm -f "$vedir"/README
            fi
            #   Remove the virtualenv and its bootstrap.
            rm -rf "$vedir"/.build/{bootstrap/pactivate*,virtualenv}
            #   Remove any .python interpreter link and requirements.txt we may
            #   have created. (Probably we created; nobody else should have!)
            rm -f "$vedir"/.python "$vedir"/requirements.txt
            #   Remove any requirements.txt we may have created
            #   Attempt to remove remaining directories; fail quietly
            #   if they're not empty as we handle that later.
            rmdir >/dev/null 2>&1 "$vedir"/.build/bootstrap "$vedir"/.build \
                || true
            rmdir "$vedir" || {
                echo 1>&2 'Warning: non-pae files not removed.'
                return 0
            }
            ;;
        *)
            echo 1>&2 "pae: internal error: bad action '$action'."
            return 9
            ;;
    esac
}

__pae_debug() {
    echo >>~/tmp/pae.debug "$@"
}

__pae_complete() {
    local debug=':'
   #local debug='__pae_debug'       # uncomment to enable debugging
    $debug
    $debug "1=$1 2=$2 3=$3 COMP_CWORD=$COMP_CWORD"
    $debug "COMP_WORDS=${COMP_WORDS[@]}"

    #   $pae_home: default virtual environments location
    local pae_home
    if   [[ -v PAE_HOME ]]; then    pae_home="$PAE_HOME"
    elif [[ -v WORKON_HOME ]]; then pae_home="$WORKON_HOME"
    else                            pae_home=~/.pyvirtenv
    fi

    local command="$1" word="$2" prevword="$3"
    local vepath vebase i

    #   Determine commpletion state from previous words on command line.
    #     =0: completing options or virtual env name
    #     =1: we have virtual env name; completing executable
    #     ≥2: we have executable; completing options to it
    local cstate=0                  # completing options or virtual env name
    for i in $(seq 0 $(($COMP_CWORD - 1)) ); do
        $debug "state $cstate check $i: ${COMP_WORDS[i]}"
        #   If we're at the start; stay in state 0.
        [[ $i -eq 0 ]] && continue                      # at start of command
        [[ ${COMP_WORDS[$i]} =~ ^- ]] && continue       # going through options
        #   found a non-option; must be virtual env name or path
        [[ -z $vepath ]] && {
            #   the first one we come across is virtual env name or path
            $debug "stripped=${COMP_WORDS[$i]#*/}"
            if [[ ${COMP_WORDS[$i]#*/} != ${COMP_WORDS[$i]} ]]; then
                vepath="${COMP_WORDS[$i]}"  # has a slash; must be path
            else
                vepath="$pae_home/${COMP_WORDS[$i]}"
            fi
            $debug "vepath=$vepath"
        }
        cstate=$(($cstate + 1))                         # passed a non-option
    done
    $debug "state $cstate"

    if [[ $cstate -eq 0 && $word =~ ^- ]]; then
        #   pae option.
        mapfile -t COMPREPLY < <(compgen -W "-r -a -d -l -c --rm -v" -- "$word")
    elif [[ $cstate -eq 0 ]]; then
        #   Virtual env name or path
        COMPREPLY=()
        $debug "glob:" "$pae_home/$2"*
        if [[ ${word#*/} == $word ]]; then
            #   No slashes; complete from $pae_home
            for vepath in "$pae_home/$word"*; do
                vebase="$(basename "$vepath")"
                [[ $vebase == pactivate ]] && continue
                COMPREPLY+=("$vebase")
            done
        else
            #   word has slashes; standard filename completion
            for i in $(compgen -G "${word}*"); do
                COMPREPLY+=("$i")
            done
        fi
    elif [[ $cstate -eq 1 ]]; then
        $debug "cstate=2 vepath=$vepath"
        local vebin
        for vebin in "$vepath/.build/virtualenv/bin" "$vepath/bin" ""; do
            $debug "vebin check: $vebin"
            [[ -r $vebin/activate ]] && break
        done
        $debug "vebin=$vebin"
        if [[ -z $vebin ]]; then
            #   not a virtual env
            unset COMPREPLY
        else
            COMPREPLY=()
            for i in "$vebin/"*; do
                [[ ! -x $i && ! -L $i ]] && continue    # not executable
                i="$(basename "$i")"
                [[ $i == ${word}* ]] && COMPREPLY+=( "$(basename "$i")" )
            done
        fi
    else
        #   TODO: re-use the comspec for the exectuable in virtualenv  if
        #   available
        unset COMPREPLY
    fi
    $debug "COMP_REPLY=${COMPREPLY[@]}"
}
complete -F __pae_complete pae
