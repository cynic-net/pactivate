#   pae version 0.3.2   https://github.com/0cjs/pactivate
#
#   pae provides pactivate-based commands similar to virtualenvwrapper.
#   See the __pae_usage() function below for full documentation.
#
#   Todo:
#   - Bash completion of NAME argument.
#   - `-p PATH` option to select Python interpreter.
#   - `-q` option
#

[ -n "$BASH_VERSION" ] || { echo 1>&2 "source (.) this with Bash."; exit 9; }
#   https://stackoverflow.com/a/28776166/107294
(return 0 2>/dev/null) \
    || { echo 1>&2 "source (.) pae with Bash."; exit 9; }


__pae_url=https://raw.githubusercontent.com/0cjs/pactivate/main/pactivate

__pae_usage() {
    cat <<_____
Usage:
    pae [-r] NAME [CMD] ... # run a command (default NAME) in a virtual env
    pae -a NAME             # activate a virtual env
    pae -d                  # deactivate the current virtual env
    pae -l                  # list virtual env in virtual env home
    pae -c NAME             # create a virtual env

All commands also accept the following options:
    -v          Verbose mode; otherwise we try to run as quietly as possible.

Virtual environments are normally stored in the "virtual environment home,"
which is specified by the PAE_HOME environment variable. If that is not set
it falls back to WORKON_HOME for virtualenvwrapper compatibility, and
then ~/.pyvirtenv. Howwever specifying a NAME parameter with a slash in it
will instead use the exact path specified. (Use ./NAME to use a directory
under the current working directory.)

This creates new virtual environments using pactivate, with the virtual
environment in the usual place in .build/virtualenv/ under the directory
or name given. However, for backward compatibility with virtualenvwrapper
it will also activate and deactivate any name/directory that directly
contains a virtual environment built with virtualenv.
_____
}

pae() {
    #   $__pae_home: default virtual environments location
    if   [[ -v PAE_HOME ]]; then    __pae_home="$PAE_HOME"
    elif [[ -v WORKON_HOME ]];then  __pae_home="$WORKON_HOME"
    else                            __pae_home=~/.pyvirtenv
    fi

    #   $__pae_command: parse command line arguments
    __pae_quiet=-q
    __pae_command=run
    while [[ ${#@} -gt 0 ]]; do case "$1" in
        -a) shift; __pae_command=activate;;
        -c) shift; __pae_command=create;;
        -d) shift; __pae_command=deactivate;;
        -h) __pae_usage; return 0;;
        -l) shift;
            ls --ignore pactivate "$__pae_home"
            return 0
            ;;
        -r) shift; __pae_command=run;;
        -v) shift; __pae_quiet='';;
        -*) echo 1>&2 "pae: bad option: $1 (-h for help)"; return 2
            ;;
        *)  break;;
    esac; done
    if [[ ${#@} -eq 0 ]]; then
        if [[ $__pae_command != deactivate && $__pae_command != run ]]; then
            echo 1>&2 "pae: missing parameter (-h for help)"; return 2
        fi
    elif [[ ${#@} -ne 1 && $__pae_command != run ]]; then
        echo 1>&2 "pae: too many parameters:" "$@"; return 2
    else
        __pae_vdir="$1"                 # assume directory...
        [[ $1 == ${1##*/} ]] && {       # ...unless no slash in arg
            [[ $1 == . || $1 == .. ]] && {
                echo 1>&2 "pae: bad virtalenv name: $1"
                return 2
            }
            __pae_vdir="$__pae_home/$1"
        }
        shift                           # remove last param
    fi

    case $__pae_command in
        run)
            #   $__pae_bin: confirm virtual env exists and find its bin dir.
            if [[ -r $__pae_vdir/.build/virtualenv/bin/activate ]]; then
                __pae_bin="$__pae_vdir/.build/virtualenv/bin"
            elif [[ -r $__pae_vdir/bin/activate ]]; then
                #   Backwards compatibility with virtualenvwrapper.
                __pae_bin="$__pae_vdir/bin"
            else
                echo 1>&2 "pae: $__pae_vdir does not appear to be a virtual env"
                return 1
            fi
            #   Find and run the command.
            if [[ ${#@} -ge 1 && -x "$__pae_bin/$1" ]]; then
                #   First arg is an exectuable in bin
                __pae_bin_command="$1"
                shift
            else
                #   Assume that virtual env name is also command name.
                __pae_bin_command="$(basename "$__pae_vdir")"
            fi
            [[ -z $__pae_quiet ]] \
                && echo "pae: running $__pae_bin_command from $__pae_bin"
            "$__pae_bin/$__pae_bin_command" "$@"
            ;;
        activate)
            if [[ -r $__pae_vdir/.build/virtualenv/bin/activate ]]; then
                . "$__pae_home/pactivate" $__pae_quiet -B "$__pae_vdir"
            elif [[ -r $__pae_vdir/bin/activate ]]; then
                . "$__pae_vdir/bin/activate"    # compatibility mode
            else
                echo 1>&2 "pae: $__pae_vdir does not appear to be a virtual env"
                return 1
            fi
            ;;
        deactivate)
            if [[ $(type -t deactivate) == function ]]; then
                deactivate
            else
                echo 1>&2 "pae: no deactivate(); not in a virtual environment?"
                return 1
            fi
            ;;
        create)
            [[ -e $__pae_vdir/.build/virtualenv/bin/activate \
               || -e $__pae_vdir/bin/activate ]] \
            && {
                echo 1>&2 "pae: virtual environment already exists in $__pae_vdir"
                return 3
            }
            [[ -r "$__pae_home/pactivate" ]] || {
                echo "Downloading pactivate..."
                curl --fail --show-error ${__pa_quiet:+--silent} \
                    --create-dirs --output "$__pae_home/pactivate" \
                    "$__pae_url" \
                || { echo 1>&2 "pae: can't download pactivate"; return 22; }
            }
            mkdir -p "$__pae_vdir"
            cat >"$__pae_vdir/README" <<_____
.build/virtualenv/ is a pactivate environment created by pae.
For more information, see https://github.com/0cjs/pactivate
_____
            . "$__pae_home/pactivate" $__pae_quiet -B "$__pae_vdir"
            ;;
    esac
}
